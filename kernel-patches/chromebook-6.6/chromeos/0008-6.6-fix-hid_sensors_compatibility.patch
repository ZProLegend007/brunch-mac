--- a/drivers/iio/common/hid-sensors/hid-sensor-cros-compat.c
+++ b/drivers/iio/common/hid-sensors/hid-sensor-cros-compat.c
@@ -463,7 +463,7 @@
 static int hid_als_probe(struct platform_device *pdev)
 {
 	const struct hid_sensor_common *st = hid_sensor_get_drvdata(pdev);
 	struct iio_dev *indio_dev;
 	int err;

 	indio_dev = hid_sensor_create_indio_dev(pdev, st);
 	if (!indio_dev)
 		return -ENOMEM;

 	devm_iio_device_register(pdev, indio_dev);

 	indio_dev->info->attrs = cros_compat_attributes;

-	err = devm_iio_kfifo_buffer_setup_ext(&pdev->dev, indio_dev, NULL, cros_compat_attributes);
+	err = devm_iio_kfifo_buffer_setup_ext(&pdev->dev, indio_dev, NULL, (const struct iio_dev_attr **) cros_compat_attributes);
 	if (err < 0) {
 		devm_iio_device_unregister(indio_dev);
 		return err;
 	}

 	return 0;
 }
@@ -840,7 +840,7 @@
 static int hid_accel_3d_probe(struct platform_device *pdev)
 {
 	const struct hid_sensor_common *st = hid_sensor_get_drvdata(pdev);
 	struct iio_dev *indio_dev;
 	int err;

 	indio_dev = hid_sensor_create_indio_dev(pdev, st);
 	if (!indio_dev)
 		return -ENOMEM;

 	devm_iio_device_register(pdev, indio_dev);

 	indio_dev->info->attrs = cros_compat_attributes;

-	err = devm_iio_kfifo_buffer_setup_ext(&pdev->dev, indio_dev, NULL, cros_compat_attributes);
+	err = devm_iio_kfifo_buffer_setup_ext(&pdev->dev, indio_dev, NULL, (const struct iio_dev_attr **) cros_compat_attributes);
 	if (err < 0) {
 		devm_iio_device_unregister(indio_dev);
 		return err;
 	}

 	return 0;
 }
