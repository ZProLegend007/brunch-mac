diff -uN a/drivers/usb/core/hub.c b/drivers/usb/core/hub.c
--- a/drivers/usb/core/hub.c	2020-03-20 06:38:25.000000000 +0100
+++ b/drivers/usb/core/hub.c	2020-03-23 15:00:38.097768447 +0100
@@ -34,6 +34,7 @@
 
 #include "hub.h"
 #include "otg_productlist.h"
+#include "surface_tablet_mode.h"
 
 #define USB_VENDOR_GENESYS_LOGIC		0x05e3
 #define USB_VENDOR_SMSC				0x0424
@@ -1665,6 +1666,8 @@
 	struct usb_device *hdev = interface_to_usbdev(intf);
 	int port1;
 
+	surface_tablet_mode_fini(hub, hub->hdev->bus->busnum);
+
 	/*
 	 * Stop adding new hub events. We do not want to block here and thus
 	 * will not try to remove any pending work item.
@@ -1829,6 +1832,8 @@
 	if (id->driver_info & HUB_QUIRK_CHECK_PORT_AUTOSUSPEND)
 		hub->quirk_check_port_auto_suspend = 1;
 
+	surface_tablet_mode_init(hub, hub->hdev->bus->busnum);
+
 	if (hub_configure(hub, &desc->endpoint[0].desc) >= 0)
 		return 0;
 
@@ -4907,6 +4912,8 @@
 	struct usb_device *udev = port_dev->child;
 	static int unreliable_port = -1;
 
+	surface_tablet_mode_notify(hub->hdev->bus->busnum, port1, portstatus & USB_PORT_STAT_CONNECTION ? false : true);
+
 	/* Disconnect any existing devices under this port */
 	if (udev) {
 		if (hcd->usb_phy && !hdev->parent)
diff -uN a/drivers/usb/core/Makefile b/drivers/usb/core/Makefile
--- a/drivers/usb/core/Makefile	2020-03-20 06:38:25.000000000 +0100
+++ b/drivers/usb/core/Makefile	2020-03-23 15:00:38.097768447 +0100
@@ -7,6 +7,7 @@
 usbcore-y += config.o file.o buffer.o sysfs.o endpoint.o
 usbcore-y += devio.o notify.o generic.o quirks.o devices.o
 usbcore-y += phy.o port.o
+usbcore-y += surface_tablet_mode.o
 
 usbcore-$(CONFIG_OF)		+= of.o
 usbcore-$(CONFIG_USB_PCI)		+= hcd-pci.o
--- a/drivers/usb/core/surface_tablet_mode.c	2020-04-13 07:38:27.152355010 +0200
+++ b/drivers/usb/core/surface_tablet_mode.c	2020-04-13 11:32:07.632455059 +0200
@@ -0,0 +1,186 @@
+/*
+ * Tablet mode detection support for Microsoft Surface tablets.
+ *
+ * This program is free software; you can redistribute it and/or
+ * modify it under the terms of the GNU General Public License
+ * as published by the Free Software Foundation; version 2
+ * of the License.
+ */
+
+#include <linux/dmi.h>
+#include <linux/input.h>
+
+#include "hub.h"
+
+static bool surface_tablet_mode = true;
+module_param(surface_tablet_mode, bool, 0644);
+MODULE_PARM_DESC(surface_tablet_mode, "Microsoft Surface devices tablet mode module (default: true)");
+
+struct port_info {
+	int bus;
+	int port;
+};
+
+static const struct port_info surface_3 = {
+	.bus = 1,
+	.port = 3,
+};
+
+static const struct port_info surface_pro_3 = {
+	.bus = 1,
+	.port = 3,
+};
+
+static const struct port_info surface_pro_4 = {
+	.bus = 1,
+	.port = 7,
+};
+
+static const struct port_info surface_pro_5 = {
+	.bus = 1,
+	.port = 7,
+};
+
+static const struct port_info surface_pro_6 = {
+	.bus = 1,
+	.port = 7,
+};
+
+static const struct port_info surface_pro_7 = {
+	.bus = 3,
+	.port = 8,
+};
+
+static const struct port_info surface_book = {
+	.bus = 1,
+	.port = 1,
+};
+
+static const struct dmi_system_id devices[] = {
+	{
+		.ident = "Microsoft Surface 3",
+		.matches = {
+			DMI_EXACT_MATCH(DMI_SYS_VENDOR, "Microsoft Corporation"),
+			DMI_EXACT_MATCH(DMI_PRODUCT_NAME, "Surface 3"),
+		},
+		.driver_data = (void *)&surface_3,
+	},
+	{
+		.ident = "Microsoft Surface Pro 3",
+		.matches = {
+			DMI_EXACT_MATCH(DMI_SYS_VENDOR, "Microsoft Corporation"),
+			DMI_EXACT_MATCH(DMI_PRODUCT_NAME, "Surface Pro 3"),
+		},
+		.driver_data = (void *)&surface_pro_3,
+	},
+	{
+		.ident = "Microsoft Surface Pro 4",
+		.matches = {
+			DMI_EXACT_MATCH(DMI_SYS_VENDOR, "Microsoft Corporation"),
+			DMI_EXACT_MATCH(DMI_PRODUCT_NAME, "Surface Pro 4"),
+		},
+		.driver_data = (void *)&surface_pro_4,
+	},
+	{
+		.ident = "Microsoft Surface Pro 2017",
+		.matches = {
+			DMI_EXACT_MATCH(DMI_SYS_VENDOR, "Microsoft Corporation"),
+			DMI_EXACT_MATCH(DMI_PRODUCT_NAME, "Surface Pro"),
+		},
+		.driver_data = (void *)&surface_pro_5,
+	},
+	{
+		.ident = "Microsoft Surface Pro 6",
+		.matches = {
+			DMI_EXACT_MATCH(DMI_SYS_VENDOR, "Microsoft Corporation"),
+			DMI_EXACT_MATCH(DMI_PRODUCT_NAME, "Surface Pro 6"),
+		},
+		.driver_data = (void *)&surface_pro_6,
+	},
+	{
+		.ident = "Microsoft Surface Pro 7",
+		.matches = {
+			DMI_EXACT_MATCH(DMI_SYS_VENDOR, "Microsoft Corporation"),
+			DMI_EXACT_MATCH(DMI_PRODUCT_NAME, "Surface Pro 7"),
+		},
+		.driver_data = (void *)&surface_pro_7,
+	},
+	{
+		.ident = "Microsoft Surface Book",
+		.matches = {
+			DMI_EXACT_MATCH(DMI_SYS_VENDOR, "Microsoft Corporation"),
+			DMI_EXACT_MATCH(DMI_PRODUCT_NAME, "Surface Book"),
+		},
+		.driver_data = (void *)&surface_book,
+	},
+	{}
+};
+
+static int connected_devices = 0;
+static int surface_tablet_mode_bus = 0;
+static int surface_tablet_mode_port = 0;
+static struct input_dev *input = NULL;
+static bool tablet_mode = 0;
+
+void surface_tablet_mode_notify(int bus, int port, bool connect)
+{
+	if (input && surface_tablet_mode_bus == bus && surface_tablet_mode_port == port && connect != tablet_mode) {
+		tablet_mode = connect;
+		input_report_switch(input, SW_TABLET_MODE, tablet_mode);
+		input_sync(input);
+	}
+}
+
+void surface_tablet_mode_init(struct usb_hub *hub, int bus)
+{
+	const struct dmi_system_id *dmi_match;
+	char *input_name = "Surface Pro Tablet Mode";
+	struct port_info *port_data;
+	int error;
+
+	dmi_match = dmi_first_match(devices);
+	if (!dmi_match || !surface_tablet_mode)
+		return;
+
+	port_data = dmi_match->driver_data;
+
+	if (port_data->bus != bus)
+		return;
+
+	if(connected_devices++)
+		return;
+
+	surface_tablet_mode_bus = port_data->bus;
+	surface_tablet_mode_port = port_data->port;
+
+	input = input_allocate_device();
+	if (!input)
+		return;
+
+	input->id.bustype = BUS_VIRTUAL;
+	input->dev.parent = hub->intfdev;
+	input->name = input_name;
+
+	input_set_capability(input, EV_SW, SW_TABLET_MODE);
+
+	error = input_register_device(input);
+	if (error)
+		goto err_free_input;
+
+	dev_info(input->dev.parent, "Surface Pro Tablet Mode: activated\n");
+
+	surface_tablet_mode_notify(surface_tablet_mode_bus, surface_tablet_mode_port, true);
+
+	return;
+
+ err_free_input:
+	input_free_device(input);
+}
+
+void surface_tablet_mode_fini(struct usb_hub *hub, int bus)
+{
+	if (input && surface_tablet_mode_bus == bus && !--connected_devices) {
+		input_unregister_device(input);
+		input = NULL;
+	}
+}
diff -uN a/drivers/usb/core/surface_tablet_mode.h b/drivers/usb/core/surface_tablet_mode.h
--- a/drivers/usb/core/surface_tablet_mode.h	1970-01-01 01:00:00.000000000 +0100
+++ b/drivers/usb/core/surface_tablet_mode.h	2020-03-23 15:00:38.097768447 +0100
@@ -0,0 +1,3 @@
+void surface_tablet_mode_notify(int bus, int port, bool connected);
+void surface_tablet_mode_init(struct usb_hub *hub, int bus);
+void surface_tablet_mode_fini(struct usb_hub *hub, int bus);
