--- a/drivers/platform/x86/intel/vbtn.c	2020-11-14 15:16:09.000000000 +0100
+++ b/drivers/platform/x86/intel/vbtn.c	2021-01-02 09:13:02.617662000 +0100
@@ -125,6 +125,21 @@
 		if (ke->type == KE_KEY)
 			return;
 	}
+	
+	switch(event) {
+		case 0xc0: case 0xc2: case 0xc4: case 0xc6: case 0xc8: case 0xce:
+			ke = sparse_keymap_entry_from_scancode(
+				input_dev, event);
+			input_report_key(input_dev, ke->keycode, 1);
+			input_sync(input_dev);
+			return;
+		case 0xc1: case 0xc3: case 0xc5: case 0xc7: case 0xc9: case 0xcf:
+			ke = sparse_keymap_entry_from_scancode(
+				input_dev, event);
+			input_report_key(input_dev, ke->keycode, 0);
+			input_sync(input_dev);
+			return;
+	}
 
 	/*
 	 * Even press events are autorelease if there is no corresponding odd
@@ -152,70 +148,24 @@
 	return ACPI_SUCCESS(status);
 }
 
-/*
- * There are several laptops (non 2-in-1) models out there which support VGBS,
- * but simply always return 0, which we translate to SW_TABLET_MODE=1. This in
- * turn causes userspace (libinput) to suppress events from the builtin
- * keyboard and touchpad, making the laptop essentially unusable.
- *
- * Since the problem of wrongly reporting SW_TABLET_MODE=1 in combination
- * with libinput, leads to a non-usable system. Where as OTOH many people will
- * not even notice when SW_TABLET_MODE is not being reported, a DMI based allow
- * list is used here. This list mainly matches on the chassis-type of 2-in-1s.
- *
- * There are also some 2-in-1s which use the intel-vbtn ACPI interface to report
- * SW_TABLET_MODE with a chassis-type of 8 ("Portable") or 10 ("Notebook"),
- * these are matched on a per model basis, since many normal laptops with a
- * possible broken VGBS ACPI-method also use these chassis-types.
- */
-static const struct dmi_system_id dmi_switches_allow_list[] = {
-	{
-		.matches = {
-			DMI_EXACT_MATCH(DMI_CHASSIS_TYPE, "31" /* Convertible */),
-		},
-	},
-	{
-		.matches = {
-			DMI_EXACT_MATCH(DMI_CHASSIS_TYPE, "32" /* Detachable */),
-		},
-	},
-	{
-		.matches = {
-			DMI_MATCH(DMI_SYS_VENDOR, "Dell Inc."),
-			DMI_MATCH(DMI_PRODUCT_NAME, "Venue 11 Pro 7130"),
-		},
-	},
-	{
-		.matches = {
-			DMI_MATCH(DMI_SYS_VENDOR, "Hewlett-Packard"),
-			DMI_MATCH(DMI_PRODUCT_NAME, "HP Pavilion 13 x360 PC"),
-		},
-	},
-	{
-		.matches = {
-			DMI_MATCH(DMI_SYS_VENDOR, "Acer"),
-			DMI_MATCH(DMI_PRODUCT_NAME, "Switch SA5-271"),
-		},
-	},
-	{
-		.matches = {
-			DMI_MATCH(DMI_SYS_VENDOR, "Dell Inc."),
-			DMI_MATCH(DMI_PRODUCT_NAME, "Inspiron 7352"),
-		},
-	},
-	{} /* Array terminator */
-};
-
 static bool intel_vbtn_has_switches(acpi_handle handle, bool dual_accel)
 {
+	const char *chassis_type = dmi_get_system_info(DMI_CHASSIS_TYPE);
 	unsigned long long vgbs;
 	acpi_status status;
 
 	/* See dual_accel_detect.h for more info */
 	if (dual_accel)
 		return false;
 
-	if (!dmi_check_system(dmi_switches_allow_list))
+	/*
+	 * Some normal laptops have a VGBS method despite being non-convertible
+	 * and their VGBS method always returns 0, causing detect_tablet_mode()
+	 * to report SW_TABLET_MODE=1 to userspace, which causes issues.
+	 * These laptops have a DMI chassis_type of 9 ("Laptop"), do not report
+	 * switches on any devices with a DMI chassis_type of 9.
+	 */
+	if (chassis_type && strcmp(chassis_type, "9") == 0)
 		return false;
 
 	status = acpi_evaluate_integer(handle, "VGBS", NULL, &vgbs);
